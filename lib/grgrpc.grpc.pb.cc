// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: grgrpc.proto

#include "grgrpc.pb.h"
#include "grgrpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace grgrpc {

static const char* GNURadioLink_method_names[] = {
  "/grgrpc.GNURadioLink/PublishData",
  "/grgrpc.GNURadioLink/RequestData",
};

std::unique_ptr< GNURadioLink::Stub> GNURadioLink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GNURadioLink::Stub> stub(new GNURadioLink::Stub(channel));
  return stub;
}

GNURadioLink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PublishData_(GNURadioLink_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_RequestData_(GNURadioLink_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::grgrpc::GRData, ::grgrpc::StatusData>* GNURadioLink::Stub::PublishDataRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grgrpc::GRData, ::grgrpc::StatusData>(channel_.get(), rpcmethod_PublishData_, context);
}

::grpc::ClientAsyncReaderWriter< ::grgrpc::GRData, ::grgrpc::StatusData>* GNURadioLink::Stub::AsyncPublishDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::grgrpc::GRData, ::grgrpc::StatusData>(channel_.get(), cq, rpcmethod_PublishData_, context, tag);
}

::grpc::ClientReaderWriter< ::grgrpc::StatusData, ::grgrpc::GRData>* GNURadioLink::Stub::RequestDataRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::grgrpc::StatusData, ::grgrpc::GRData>(channel_.get(), rpcmethod_RequestData_, context);
}

::grpc::ClientAsyncReaderWriter< ::grgrpc::StatusData, ::grgrpc::GRData>* GNURadioLink::Stub::AsyncRequestDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::grgrpc::StatusData, ::grgrpc::GRData>(channel_.get(), cq, rpcmethod_RequestData_, context, tag);
}

GNURadioLink::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      GNURadioLink_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< GNURadioLink::Service, ::grgrpc::GRData, ::grgrpc::StatusData>(
          std::mem_fn(&GNURadioLink::Service::PublishData), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      GNURadioLink_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< GNURadioLink::Service, ::grgrpc::StatusData, ::grgrpc::GRData>(
          std::mem_fn(&GNURadioLink::Service::RequestData), this)));
}

GNURadioLink::Service::~Service() {
}

::grpc::Status GNURadioLink::Service::PublishData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grgrpc::StatusData, ::grgrpc::GRData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GNURadioLink::Service::RequestData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grgrpc::GRData, ::grgrpc::StatusData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grgrpc

