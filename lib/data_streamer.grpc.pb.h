// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: data_streamer.proto
#ifndef GRPC_data_5fstreamer_2eproto__INCLUDED
#define GRPC_data_5fstreamer_2eproto__INCLUDED

#include "data_streamer.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace datastreamer {

class DataStreamer GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::datastreamer::Reply>> RequestData(::grpc::ClientContext* context, const ::datastreamer::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::datastreamer::Reply>>(RequestDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::datastreamer::Reply>> AsyncRequestData(::grpc::ClientContext* context, const ::datastreamer::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::datastreamer::Reply>>(AsyncRequestDataRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::datastreamer::Reply>* RequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::datastreamer::Reply>* AsyncRequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::datastreamer::Reply>> RequestData(::grpc::ClientContext* context, const ::datastreamer::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::datastreamer::Reply>>(RequestDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::datastreamer::Reply>> AsyncRequestData(::grpc::ClientContext* context, const ::datastreamer::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::datastreamer::Reply>>(AsyncRequestDataRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::datastreamer::Reply>* RequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::datastreamer::Reply>* AsyncRequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_RequestData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestData(::grpc::ServerContext* context, const ::datastreamer::Request* request, ::grpc::ServerWriter< ::datastreamer::Reply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestData() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestData(::grpc::ServerContext* context, const ::datastreamer::Request* request, ::grpc::ServerWriter< ::datastreamer::Reply>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestData(::grpc::ServerContext* context, ::datastreamer::Request* request, ::grpc::ServerAsyncWriter< ::datastreamer::Reply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestData<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RequestData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestData() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestData(::grpc::ServerContext* context, const ::datastreamer::Request* request, ::grpc::ServerWriter< ::datastreamer::Reply>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace datastreamer


#endif  // GRPC_data_5fstreamer_2eproto__INCLUDED
