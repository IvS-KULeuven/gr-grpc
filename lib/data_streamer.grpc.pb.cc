// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: data_streamer.proto

#include "data_streamer.pb.h"
#include "data_streamer.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace datastreamer {

static const char* DataStreamer_method_names[] = {
  "/datastreamer.DataStreamer/RequestData",
};

std::unique_ptr< DataStreamer::Stub> DataStreamer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DataStreamer::Stub> stub(new DataStreamer::Stub(channel));
  return stub;
}

DataStreamer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestData_(DataStreamer_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::datastreamer::Reply>* DataStreamer::Stub::RequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request) {
  return new ::grpc::ClientReader< ::datastreamer::Reply>(channel_.get(), rpcmethod_RequestData_, context, request);
}

::grpc::ClientAsyncReader< ::datastreamer::Reply>* DataStreamer::Stub::AsyncRequestDataRaw(::grpc::ClientContext* context, const ::datastreamer::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::datastreamer::Reply>(channel_.get(), cq, rpcmethod_RequestData_, context, request, tag);
}

DataStreamer::Service::Service() {
  (void)DataStreamer_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      DataStreamer_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< DataStreamer::Service, ::datastreamer::Request, ::datastreamer::Reply>(
          std::mem_fn(&DataStreamer::Service::RequestData), this)));
}

DataStreamer::Service::~Service() {
}

::grpc::Status DataStreamer::Service::RequestData(::grpc::ServerContext* context, const ::datastreamer::Request* request, ::grpc::ServerWriter< ::datastreamer::Reply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace datastreamer

