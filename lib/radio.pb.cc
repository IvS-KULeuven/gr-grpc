// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "radio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace radio_rpc {
class EmptyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Empty> {
} _Empty_default_instance_;
class BoolDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Bool> {
} _Bool_default_instance_;
class FloatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float> {
} _Float_default_instance_;
class ParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Parameters> {
} _Parameters_default_instance_;

namespace protobuf_radio_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, boolean_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float, _float_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, sample_rate_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Empty)},
  { 4, -1, sizeof(Bool)},
  { 9, -1, sizeof(Float)},
  { 14, -1, sizeof(Parameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Bool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Parameters_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "radio.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Empty_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Bool_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Float_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Parameters_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Empty_default_instance_.DefaultConstruct();
  _Bool_default_instance_.DefaultConstruct();
  _Float_default_instance_.DefaultConstruct();
  _Parameters_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013radio.proto\022\tradio_rpc\"\007\n\005Empty\"\027\n\004Boo"
      "l\022\017\n\007boolean\030\001 \001(\010\"\027\n\005Float\022\016\n\006_float\030\001 "
      "\001(\002\"B\n\nParameters\022\021\n\tfrequency\030\001 \001(\002\022\014\n\004"
      "gain\030\002 \001(\002\022\023\n\013sample_rate\030\003 \001(\0052\311\001\n\005Radi"
      "o\022/\n\007GetData\022\020.radio_rpc.Empty\032\020.radio_r"
      "pc.Float0\001\022/\n\007SetData\022\020.radio_rpc.Float\032"
      "\020.radio_rpc.Empty(\001\022)\n\004Stop\022\020.radio_rpc."
      "Empty\032\017.radio_rpc.Bool\0223\n\tSetParams\022\025.ra"
      "dio_rpc.Parameters\032\017.radio_rpc.Boolb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "radio.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_radio_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_radio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:radio_rpc.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:radio_rpc.Empty)
}

void Empty::SharedCtor() {
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:radio_rpc.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[0].descriptor;
}

const Empty& Empty::default_instance() {
  protobuf_radio_2eproto::InitDefaults();
  return *internal_default_instance();
}

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:radio_rpc.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radio_rpc.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:radio_rpc.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radio_rpc.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radio_rpc.Empty)
  // @@protoc_insertion_point(serialize_end:radio_rpc.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radio_rpc.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:radio_rpc.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radio_rpc.Empty)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radio_rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radio_rpc.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radio_rpc.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radio_rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radio_rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radio_rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bool::kBooleanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bool::Bool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_radio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:radio_rpc.Bool)
}
Bool::Bool(const Bool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boolean_ = from.boolean_;
  // @@protoc_insertion_point(copy_constructor:radio_rpc.Bool)
}

void Bool::SharedCtor() {
  boolean_ = false;
  _cached_size_ = 0;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:radio_rpc.Bool)
  SharedDtor();
}

void Bool::SharedDtor() {
}

void Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bool::descriptor() {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[1].descriptor;
}

const Bool& Bool::default_instance() {
  protobuf_radio_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bool* Bool::New(::google::protobuf::Arena* arena) const {
  Bool* n = new Bool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:radio_rpc.Bool)
  boolean_ = false;
}

bool Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radio_rpc.Bool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool boolean = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radio_rpc.Bool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radio_rpc.Bool)
  return false;
#undef DO_
}

void Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radio_rpc.Bool)
  // bool boolean = 1;
  if (this->boolean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolean(), output);
  }

  // @@protoc_insertion_point(serialize_end:radio_rpc.Bool)
}

::google::protobuf::uint8* Bool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radio_rpc.Bool)
  // bool boolean = 1;
  if (this->boolean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolean(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:radio_rpc.Bool)
  return target;
}

size_t Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radio_rpc.Bool)
  size_t total_size = 0;

  // bool boolean = 1;
  if (this->boolean() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radio_rpc.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  const Bool* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radio_rpc.Bool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radio_rpc.Bool)
    MergeFrom(*source);
  }
}

void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radio_rpc.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.boolean() != 0) {
    set_boolean(from.boolean());
  }
}

void Bool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radio_rpc.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radio_rpc.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  return true;
}

void Bool::Swap(Bool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bool::InternalSwap(Bool* other) {
  std::swap(boolean_, other->boolean_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bool::GetMetadata() const {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bool

// bool boolean = 1;
void Bool::clear_boolean() {
  boolean_ = false;
}
bool Bool::boolean() const {
  // @@protoc_insertion_point(field_get:radio_rpc.Bool.boolean)
  return boolean_;
}
void Bool::set_boolean(bool value) {
  
  boolean_ = value;
  // @@protoc_insertion_point(field_set:radio_rpc.Bool.boolean)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float::kFloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float::Float()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_radio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:radio_rpc.Float)
}
Float::Float(const Float& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _float_ = from._float_;
  // @@protoc_insertion_point(copy_constructor:radio_rpc.Float)
}

void Float::SharedCtor() {
  _float_ = 0;
  _cached_size_ = 0;
}

Float::~Float() {
  // @@protoc_insertion_point(destructor:radio_rpc.Float)
  SharedDtor();
}

void Float::SharedDtor() {
}

void Float::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float::descriptor() {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[2].descriptor;
}

const Float& Float::default_instance() {
  protobuf_radio_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float* Float::New(::google::protobuf::Arena* arena) const {
  Float* n = new Float;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float::Clear() {
// @@protoc_insertion_point(message_clear_start:radio_rpc.Float)
  _float_ = 0;
}

bool Float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radio_rpc.Float)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float _float = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radio_rpc.Float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radio_rpc.Float)
  return false;
#undef DO_
}

void Float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radio_rpc.Float)
  // float _float = 1;
  if (this->_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->_float(), output);
  }

  // @@protoc_insertion_point(serialize_end:radio_rpc.Float)
}

::google::protobuf::uint8* Float::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radio_rpc.Float)
  // float _float = 1;
  if (this->_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->_float(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:radio_rpc.Float)
  return target;
}

size_t Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radio_rpc.Float)
  size_t total_size = 0;

  // float _float = 1;
  if (this->_float() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radio_rpc.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const Float* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radio_rpc.Float)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radio_rpc.Float)
    MergeFrom(*source);
  }
}

void Float::MergeFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radio_rpc.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._float() != 0) {
    set__float(from._float());
  }
}

void Float::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radio_rpc.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float::CopyFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radio_rpc.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float::IsInitialized() const {
  return true;
}

void Float::Swap(Float* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float::InternalSwap(Float* other) {
  std::swap(_float_, other->_float_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float::GetMetadata() const {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float

// float _float = 1;
void Float::clear__float() {
  _float_ = 0;
}
float Float::_float() const {
  // @@protoc_insertion_point(field_get:radio_rpc.Float._float)
  return _float_;
}
void Float::set__float(float value) {
  
  _float_ = value;
  // @@protoc_insertion_point(field_set:radio_rpc.Float._float)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameters::kFrequencyFieldNumber;
const int Parameters::kGainFieldNumber;
const int Parameters::kSampleRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameters::Parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_radio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:radio_rpc.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_, &from.frequency_,
    reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:radio_rpc.Parameters)
}

void Parameters::SharedCtor() {
  ::memset(&frequency_, 0, reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(sample_rate_));
  _cached_size_ = 0;
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:radio_rpc.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[3].descriptor;
}

const Parameters& Parameters::default_instance() {
  protobuf_radio_2eproto::InitDefaults();
  return *internal_default_instance();
}

Parameters* Parameters::New(::google::protobuf::Arena* arena) const {
  Parameters* n = new Parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:radio_rpc.Parameters)
  ::memset(&frequency_, 0, reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(sample_rate_));
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radio_rpc.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float frequency = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radio_rpc.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radio_rpc.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radio_rpc.Parameters)
  // float frequency = 1;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frequency(), output);
  }

  // float gain = 2;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gain(), output);
  }

  // int32 sample_rate = 3;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sample_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:radio_rpc.Parameters)
}

::google::protobuf::uint8* Parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radio_rpc.Parameters)
  // float frequency = 1;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frequency(), target);
  }

  // float gain = 2;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gain(), target);
  }

  // int32 sample_rate = 3;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sample_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:radio_rpc.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radio_rpc.Parameters)
  size_t total_size = 0;

  // float frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  // float gain = 2;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  // int32 sample_rate = 3;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radio_rpc.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radio_rpc.Parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radio_rpc.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radio_rpc.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radio_rpc.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radio_rpc.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameters::InternalSwap(Parameters* other) {
  std::swap(frequency_, other->frequency_);
  std::swap(gain_, other->gain_);
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_radio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_radio_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameters

// float frequency = 1;
void Parameters::clear_frequency() {
  frequency_ = 0;
}
float Parameters::frequency() const {
  // @@protoc_insertion_point(field_get:radio_rpc.Parameters.frequency)
  return frequency_;
}
void Parameters::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:radio_rpc.Parameters.frequency)
}

// float gain = 2;
void Parameters::clear_gain() {
  gain_ = 0;
}
float Parameters::gain() const {
  // @@protoc_insertion_point(field_get:radio_rpc.Parameters.gain)
  return gain_;
}
void Parameters::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:radio_rpc.Parameters.gain)
}

// int32 sample_rate = 3;
void Parameters::clear_sample_rate() {
  sample_rate_ = 0;
}
::google::protobuf::int32 Parameters::sample_rate() const {
  // @@protoc_insertion_point(field_get:radio_rpc.Parameters.sample_rate)
  return sample_rate_;
}
void Parameters::set_sample_rate(::google::protobuf::int32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:radio_rpc.Parameters.sample_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace radio_rpc

// @@protoc_insertion_point(global_scope)
