// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: radio.proto
#ifndef GRPC_radio_2eproto__INCLUDED
#define GRPC_radio_2eproto__INCLUDED

#include "radio.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace radio_rpc {

class Radio final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::radio_rpc::Float>> GetData(::grpc::ClientContext* context, const ::radio_rpc::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::radio_rpc::Float>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::radio_rpc::Float>> AsyncGetData(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::radio_rpc::Float>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::radio_rpc::Float>> SetData(::grpc::ClientContext* context, ::radio_rpc::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::radio_rpc::Float>>(SetDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::radio_rpc::Float>> AsyncSetData(::grpc::ClientContext* context, ::radio_rpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::radio_rpc::Float>>(AsyncSetDataRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::radio_rpc::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>> AsyncStop(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>>(AsyncStopRaw(context, request, cq));
    }
    virtual ::grpc::Status SetParams(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::radio_rpc::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>> AsyncSetParams(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>>(AsyncSetParamsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::radio_rpc::Float>* GetDataRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::radio_rpc::Float>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::radio_rpc::Float>* SetDataRaw(::grpc::ClientContext* context, ::radio_rpc::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::radio_rpc::Float>* AsyncSetDataRaw(::grpc::ClientContext* context, ::radio_rpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>* AsyncStopRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::radio_rpc::Bool>* AsyncSetParamsRaw(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::radio_rpc::Float>> GetData(::grpc::ClientContext* context, const ::radio_rpc::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::radio_rpc::Float>>(GetDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::radio_rpc::Float>> AsyncGetData(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::radio_rpc::Float>>(AsyncGetDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::radio_rpc::Float>> SetData(::grpc::ClientContext* context, ::radio_rpc::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::radio_rpc::Float>>(SetDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::radio_rpc::Float>> AsyncSetData(::grpc::ClientContext* context, ::radio_rpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::radio_rpc::Float>>(AsyncSetDataRaw(context, response, cq, tag));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::radio_rpc::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>> AsyncStop(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>>(AsyncStopRaw(context, request, cq));
    }
    ::grpc::Status SetParams(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::radio_rpc::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>> AsyncSetParams(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>>(AsyncSetParamsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::radio_rpc::Float>* GetDataRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request) override;
    ::grpc::ClientAsyncReader< ::radio_rpc::Float>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::radio_rpc::Float>* SetDataRaw(::grpc::ClientContext* context, ::radio_rpc::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::radio_rpc::Float>* AsyncSetDataRaw(::grpc::ClientContext* context, ::radio_rpc::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>* AsyncStopRaw(::grpc::ClientContext* context, const ::radio_rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::radio_rpc::Bool>* AsyncSetParamsRaw(::grpc::ClientContext* context, const ::radio_rpc::Parameters& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_GetData_;
    const ::grpc::RpcMethod rpcmethod_SetData_;
    const ::grpc::RpcMethod rpcmethod_Stop_;
    const ::grpc::RpcMethod rpcmethod_SetParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::grpc::ServerWriter< ::radio_rpc::Float>* writer);
    virtual ::grpc::Status SetData(::grpc::ServerContext* context, ::grpc::ServerReader< ::radio_rpc::Float>* reader, ::radio_rpc::Empty* response);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::radio_rpc::Bool* response);
    virtual ::grpc::Status SetParams(::grpc::ServerContext* context, const ::radio_rpc::Parameters* request, ::radio_rpc::Bool* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::grpc::ServerWriter< ::radio_rpc::Float>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::radio_rpc::Empty* request, ::grpc::ServerAsyncWriter< ::radio_rpc::Float>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetData(::grpc::ServerContext* context, ::grpc::ServerReader< ::radio_rpc::Float>* reader, ::radio_rpc::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::radio_rpc::Empty, ::radio_rpc::Float>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::radio_rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::radio_rpc::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetParams() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetParams(::grpc::ServerContext* context, const ::radio_rpc::Parameters* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetParams(::grpc::ServerContext* context, ::radio_rpc::Parameters* request, ::grpc::ServerAsyncResponseWriter< ::radio_rpc::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetData<WithAsyncMethod_SetData<WithAsyncMethod_Stop<WithAsyncMethod_SetParams<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::grpc::ServerWriter< ::radio_rpc::Float>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetData(::grpc::ServerContext* context, ::grpc::ServerReader< ::radio_rpc::Float>* reader, ::radio_rpc::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetParams() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetParams(::grpc::ServerContext* context, const ::radio_rpc::Parameters* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::radio_rpc::Empty, ::radio_rpc::Bool>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::radio_rpc::Empty,::radio_rpc::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetParams() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::radio_rpc::Parameters, ::radio_rpc::Bool>(std::bind(&WithStreamedUnaryMethod_SetParams<BaseClass>::StreamedSetParams, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetParams(::grpc::ServerContext* context, const ::radio_rpc::Parameters* request, ::radio_rpc::Bool* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::radio_rpc::Parameters,::radio_rpc::Bool>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_SetParams<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::radio_rpc::Empty, ::radio_rpc::Float>(std::bind(&WithSplitStreamingMethod_GetData<BaseClass>::StreamedGetData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* context, const ::radio_rpc::Empty* request, ::grpc::ServerWriter< ::radio_rpc::Float>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::radio_rpc::Empty,::radio_rpc::Float>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetData<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetData<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_SetParams<Service > > > StreamedService;
};

}  // namespace radio_rpc


#endif  // GRPC_radio_2eproto__INCLUDED
